name: workflow

on: push

env:
  CARGO_TERM_COLOR: always

jobs:
  # build-linux:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Setup OCaml Toolchain
  #       uses: ocaml/setup-ocaml@v2
  #       with:
  #         ocaml-compiler: ocaml-variants.4.14.0+options,ocaml-option-flambda
  #     - name: Import GPG key
  #       id: import_gpg
  #       uses: crazy-max/ghaction-import-gpg@v5
  #       with:
  #         gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
  #         passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}
  #     - name: Build
  #       run: |
  #         opam install . --deps-only
  #         opam exec -- dune build
  #     - name: Rename, strip and sign
  #       run: |
  #         mv _build/default/src/Main.exe rosters
  #         chmod 755 rosters
  #         strip rosters
  #         gpg --output rosters.sig --detach-sig --armor rosters
  #         tar -czvf rosters-linux-x86_64.tar.gz rosters rosters.sig README.md LICENSE
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: rosters-ubuntu-20.04-x86_64
  #         path: rosters-linux-x86_64.tar.gz

  # build-macos:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Setup OCaml Toolchain
  #       uses: ocaml/setup-ocaml@v2
  #       with:
  #         ocaml-compiler: ocaml-variants.4.14.0+options,ocaml-option-flambda
  #     - name: Build
  #       run: |
  #         opam install . --deps-only
  #         opam exec -- dune build
  #     - name: Rename and strip
  #       run: |
  #         mv _build/default/src/Main.exe rosters
  #         chmod 755 rosters
  #         strip rosters
  #     - name: Sign
  #       env: 
  #         BUILD_CA: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #         CA_PWD: ${{ secrets.P12_PASSWORD }}
  #         KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
  #       run: |
  #         echo $BUILD_CA > cert_base64
  #         base64 -D -i cert_base64 -o certificate.p12
  #         security create-keychain -p $KEYCHAIN_PWD build.keychain
  #         security default-keychain -s build.keychain
  #         security unlock-keychain -p $KEYCHAIN_PWD build.keychain
  #         security import certificate.p12 -k build.keychain -P $CA_PWD -T /usr/bin/codesign
  #         security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PWD build.keychain
  #         /usr/bin/codesign --force -s 1835F1EA8D9878A4BA1AAB3E56AA641780D44656 rosters -v
  #         zip rosters-macos-x86_64.zip rosters README.md LICENSE
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: rosters-macos-latest-x86_64
  #         path: rosters-macos-x86_64.zip

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # - name: Import GPG key
      #   id: import_gpg
      #   uses: crazy-max/ghaction-import-gpg@v5
      #   with:
      #     gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      #     passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}
      # - name: Setup OCaml Toolchain
      #   uses: ocaml/setup-ocaml@v2
      #   with:
      #       ocaml-compiler: 4.14.0
      - name: Setup MSYS2/MinGW
        uses: msys2/setup-msys2@v2
        with:
          update: false
          install: >-
            git
            base-devel
            gcc
            zlib
      - name: Build
        # shell: bash
        shell: msys2 {0}
        run: |
          # mkdir bin
          # ln -s "/c/Users/runneradmin/.cargo/bin/cargo.exe" bin/cargo
          # export PATH="/d/a/rosters/rosters/bin:$PATH"
          # export PATH="/c/Users/runneradmin/.cargo/bin:$PATH"
          # export PATH="/c/msys64:$PATH"
          # ls "/c/msys64/mingw64/include"
          mkdir .cargo
          echo "[build]" > .cargo/config
          echo "target = 'x86_64-pc-windows-gnu'" >> .cargo/config
          # which x86_64-w64-mingw32-gcc.exe
          # which x86_64-w64-mingw32-gcc-ar
          # # ls "C:/msys64"
          # # echo "here"
          # # ls "C:/msys64/home"
          # # echo "here2"
          # # ls "C:/msys64/opt"
          # C:/msys64/msys2_shell.cmd
          # D:/cygwin/wrapperbin/opam.cmd install . --deps-only
          # D:/cygwin/wrapperbin/opam.cmd exec -- dune build
          /c/Users/runneradmin/.cargo/bin/cargo.exe build --manifest-path lib/Cargo.toml
      # - name: Rename, strip and sign
      #   shell: powershell
      #   run: |
      #     Move-Item -Path _build/default/src/Main.exe -Destination rosters.exe
      #     strip rosters.exe
      #     gpg --output rosters.exe.sig --detach-sig --armor rosters.exe
      #     $compress = @{
      #       Path = "rosters.exe", "rosters.exe.sig", "README.md", "LICENSE"
      #       CompressionLevel = "Optimal"
      #       DestinationPath = "rosters-windows-x86_64.zip"
      #     }
      #     Compress-Archive @compress
      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: rosters-windows-latest-x86_64
      #     path: rosters-windows-x86_64.zip

  # release:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-linux
  #     - build-macos
  #     - build-windows
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/')
  #       with:
  #         files: |
  #           rosters-windows-latest-x86_64/rosters-windows-x86_64.zip
  #           rosters-macos-latest-x86_64/rosters-macos-x86_64.zip
  #           rosters-ubuntu-20.04-x86_64/rosters-linux-x86_64.tar.gz

name: workflow

on: push

env:
  CARGO_TERM_COLOR: always

jobs:
  # build-linux:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Setup OCaml Toolchain
  #       uses: ocaml/setup-ocaml@v2
  #       with:
  #         ocaml-compiler: ocaml-variants.4.14.0+options,ocaml-option-flambda
  #     - name: Import GPG key
  #       id: import_gpg
  #       uses: crazy-max/ghaction-import-gpg@v5
  #       with:
  #         gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
  #         passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}
  #     - name: Build
  #       run: |
  #         opam install . --deps-only
  #         opam exec -- dune build
  #     - name: Rename, strip and sign
  #       run: |
  #         mv _build/default/src/Main.exe rosters
  #         chmod 755 rosters
  #         strip rosters
  #         gpg --output rosters.sig --detach-sig --armor rosters
  #         tar -czvf rosters-linux-x86_64.tar.gz rosters rosters.sig README.md LICENSE
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: rosters-ubuntu-20.04-x86_64
  #         path: rosters-linux-x86_64.tar.gz

  # build-macos:
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Setup OCaml Toolchain
  #       uses: ocaml/setup-ocaml@v2
  #       with:
  #         ocaml-compiler: ocaml-variants.4.14.0+options,ocaml-option-flambda
  #     - name: Build
  #       run: |
  #         opam install . --deps-only
  #         opam exec -- dune build
  #     - name: Rename and strip
  #       run: |
  #         mv _build/default/src/Main.exe rosters
  #         chmod 755 rosters
  #         strip rosters
  #     - name: Sign
  #       env: 
  #         BUILD_CA: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #         CA_PWD: ${{ secrets.P12_PASSWORD }}
  #         KEYCHAIN_PWD: ${{ secrets.MACOS_KEYCHAIN_PWD }}
  #       run: |
  #         echo $BUILD_CA > cert_base64
  #         base64 -D -i cert_base64 -o certificate.p12
  #         security create-keychain -p $KEYCHAIN_PWD build.keychain
  #         security default-keychain -s build.keychain
  #         security unlock-keychain -p $KEYCHAIN_PWD build.keychain
  #         security import certificate.p12 -k build.keychain -P $CA_PWD -T /usr/bin/codesign
  #         security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PWD build.keychain
  #         /usr/bin/codesign --force -s 1835F1EA8D9878A4BA1AAB3E56AA641780D44656 rosters -v
  #         zip rosters-macos-x86_64.zip rosters README.md LICENSE
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: rosters-macos-latest-x86_64
  #         path: rosters-macos-x86_64.zip

  # build-windows:
  #   runs-on: windows-latest
  #   env:
  #     CPLUS_INCLUDE_PATH: C:\mingw\include
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Import GPG key
  #       id: import_gpg
  #       uses: crazy-max/ghaction-import-gpg@v5
  #       with:
  #         gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
  #         passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}
  #     - name: Setup OCaml Toolchain
  #       uses: ocaml/setup-ocaml@v2
  #       with:
  #           ocaml-compiler: 4.14.0
  #     - name: Build
  #       run: |
  #         mkdir .cargo
  #         echo "[build]" > .cargo/config
  #         echo "target = 'x86_64-pc-windows-gnu'" >> .cargo/config
  #         opam install . --deps-only
  #         opam exec -- dune build
  #     - name: Rename, strip and sign
  #       run: |
  #         mv _build/default/src/Main.exe rosters.exe
  #         strip rosters.exe
  #         gpg --output rosters.exe.sig --detach-sig --armor rosters.exe
  #         zip rosters-windows-x86_64.zip rosters.exe rosters.exe.sig README.md LICENSE
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: rosters-windows-latest-x86_64
  #         path: rosters-windows-x86_64.zip

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # - name: Import GPG key
      #   id: import_gpg
      #   uses: crazy-max/ghaction-import-gpg@v5
      #   with:
      #     gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      #     passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}
      - name: Setup OCaml Toolchain
        uses: ocaml/setup-ocaml@v2
        with:
            ocaml-compiler: 4.14.0
      - name: Setup MSYS2/MinGW
        uses: msys2/setup-msys2@v2
      - name: Build
        shell: msys2 {0}
        run: |
          mkdir lib/.cargo
          echo "[build]" > lib/.cargo/config
          echo "target = 'x86_64-pc-windows-gnu'" >> lib/.cargo/config
          Get-ChildItem D:\\cygwin\\wrapperbin
          Get-ChildItem D:\\cygwin\\bin
          # D:\\cygwin\\wrapperbin\\opam install . --deps-only
          # D:\\cygwin\\wrapperbin\\opam exec -- dune build
      # - name: Rename, strip and sign
      #   run: |
      #     mv _build/default/src/Main.exe rosters.exe
      #     strip rosters.exe
      #     gpg --output rosters.exe.sig --detach-sig --armor rosters.exe
      #     Compress-Archive rosters-windows-x86_64.zip rosters.exe rosters.exe.sig README.md LICENSE
      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: rosters-windows-latest-x86_64
      #     path: rosters-windows-x86_64.zip

  # build-windows:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Setup Linux OCaml Toolchain
  #       uses: ocaml/setup-ocaml@v2
  #       with:
  #         ocaml-compiler: 4.14.0
  #     - name: Import GPG key
  #       id: import_gpg
  #       uses: crazy-max/ghaction-import-gpg@v5
  #       with:
  #         gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
  #         passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}
  #     - name: Setup cross compiler
  #       run: |
  #         sudo apt install -y gcc-mingw-w64-x86-64
  #         opam repository add windows https://github.com/ocaml-cross/opam-cross-windows.git
  #         eval `opam config env`
  #         opam install conf-flambda-windows
  #         opam install ocaml-windows
  #     - name: Build
  #       run: |
  #         opam install . --deps-only
  #         opam exec -- dune build -x windows
  #     - name: Rename, strip and sign
  #       run: |
  #         mv _build/default/src/Main.exe rosters
  #         chmod 755 rosters
  #         strip rosters
  #         gpg --output rosters.sig --detach-sig --armor rosters
  #         tar -czvf rosters-linux-x86_64.tar.gz rosters rosters.sig README.md LICENSE
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: rosters-ubuntu-20.04-x86_64
  #         path: rosters-linux-x86_64.tar.gz

  # release:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-linux
  #     - build-macos
  #     - build-windows
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #     - name: Release
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/')
  #       with:
  #         files: |
  #           rosters-windows-latest-x86_64/rosters-windows-x86_64.zip
  #           rosters-macos-latest-x86_64/rosters-macos-x86_64.zip
  #           rosters-ubuntu-20.04-x86_64/rosters-linux-x86_64.tar.gz
